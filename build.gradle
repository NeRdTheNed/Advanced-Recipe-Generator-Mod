buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://jcenter.bintray.com/" }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

plugins {
    id 'java-library'
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

apply plugin: 'java'
apply plugin: 'forge'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

///////////////////////////////////////////////////////////////////////////////

group = project.mod_group
ext.baseversion = project.mod_version

minecraft {
    version = project.minecraft_version + "-" + project.forge_version
}

///////////////////////////////////////////////////////////////////////////////

// set java compiler options to display warnings
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

// display files which get compiled
compileJava {
    options.listFiles = true
}

///////////////////////////////////////////////////////////////////////////////

// add build number to version
def env = System.getenv()
ext.buildnumber = ( env['BUILD_NUMBER'] ? env['BUILD_NUMBER'] : "custom" )

version=ext.baseversion + "-" + ext.buildnumber

logger.lifecycle "Building Advanced Recipe Generator " + ext.baseversion + "-" + ext.buildnumber + " for MC-Forge " + project.minecraft.apiVersion

// generate property file for jenkins
if(env['BUILD_NUMBER']) {
    ant.propertyfile(file:"jenkins.properties", comment:'Build Properties') {
        ant.entry(key:'version',value:version)
        ant.entry(key:'mc.version',value:project.minecraft.version)
        ant.entry(key:'forge.version',value:project.minecraft.apiVersion)
    }
}

///////////////////////////////////////////////////////////////////////////////

// copy resource files
processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.ext.baseversion
    inputs.property "buildnumber", project.ext.buildnumber
    inputs.property "mc_version", project.minecraft.version
    inputs.property "mc_apiversion", project.minecraft.apiVersion

    exclude "**/*.psd", "**/*.bak"

    // text resources which getting filtered
    filesMatching(['mcmod.info', 'pack.mcmeta', 'version.properties']) {
        expand 'version'       : project.ext.baseversion, 
               'buildnumber'   : project.ext.buildnumber, 
               'mc_version'    : project.minecraft.version, 
               'mc_apiversion' : project.minecraft.apiVersion
    }
    
    doLast {
        fileTree(dir: outputs.files.asPath, include: ['**/mcmod.info', '**/pack.mcmeta']).each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

jar {
    appendix = 'universal'
    
    manifest {
        attributes 'MCVersion' : project.minecraft.version
        attributes 'Version'   : project.version
    }
}
